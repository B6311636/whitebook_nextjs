// prisma/schema.prisma
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  Review                Review[]
  Order                 Order[]
  Owner                 Owner[]
  Category              Category[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  brand       String
  category    String
  inStock     Boolean
  book        String
  images      Image[]
  reviews     Review[]
  Owner       Owner[]
}

model Review {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  comment     String
  userId      String   @db.ObjectId
  productId   String?  @db.ObjectId
  rating      Int
  createdDate DateTime @default(now())

  product Product? @relation(fields: [productId], references: [id])
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  userId          String            @db.ObjectId
  amount          Float
  currency        String
  status          String
  deliveryStatus  String?
  createDate      DateTime          @default(now())
  paymentIntentId String            @unique
  products        CartProductType[]
  address         Address?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Owner {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  productId   String?  @db.ObjectId
  createdDate DateTime @default(now())

  product Product? @relation(fields: [productId], references: [id])
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  icon        String?
  createdDate DateTime @default(now())
  userId      String   @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Webinfo {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  name         String?
  email        String?
  phone        String?
  facebook     String?
  line         String?
  advetisement String?
}

type CartProductType {
  id          String
  name        String
  description String
  category    String
  brand       String
  selectedImg Image
  quantity    Int
  price       Float
}

type Image {
  Image     String?
  color     String
  colorCode String
  image     String
}

// type File {
//   file String
// }

type Address {
  city        String
  country     String
  line1       String
  line2       String?
  postal_code String
  state       String
}
